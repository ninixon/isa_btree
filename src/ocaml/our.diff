--- gen_our.ml	2016-11-14 14:06:53.226984772 +0000
+++ our.ml	2016-11-14 14:10:54.441155809 +0000
@@ -1,5 +1,12 @@
-open Gen_isa
+let string_of_chars chars = chars|>List.map (String.make 1)|>String.concat ""
+
+type any_t
+
+let any_ref = ref ((Obj.magic 1):any_t)
 
+
+open Gen_isa
+  
 module Util : sig
   val failwitha : char list -> 'a
   val split_at : Arith.nat -> 'a list -> 'a list * 'a list
@@ -8,7 +15,7 @@
   val assert_true : 'a -> bool -> bool
 end = struct
 
-let rec failwitha x = failwith "undefined";;
+let rec failwitha x = x|>string_of_chars|>failwith;;
 
 let rec split_at n xs = (List.take n xs, List.drop n xs);;
 
@@ -19,7 +26,10 @@
     (List.take n xs,
       (List.nth xs n, List.drop (Arith.plus_nat n Arith.one_nat) xs));;
 
-let rec assert_true arg b = b;;
+let rec assert_true arg b = (
+  let _ = any_ref := ((Obj.magic arg):any_t) in
+  if b then b else failwith "assert_true")
+;;
 
 
 end;;
@@ -35,13 +45,13 @@
 end;;
 
 
-module Constants : sig
+module type Constants_t = sig
   type min_size_t = Small_root_node_or_leaf | Small_node | Small_leaf
   val max_leaf_size : Arith.nat
   val max_node_keys : Arith.nat
   val min_leaf_size : Arith.nat
   val min_node_keys : Arith.nat
-end = struct
+end (*= struct
 
 type min_size_t = Small_root_node_or_leaf | Small_node | Small_leaf;;
 
@@ -54,18 +64,18 @@
 let min_node_keys : Arith.nat = Util.failwitha ['F'; 'I'; 'X'; 'M'; 'E'];;
 
 
-end;;
+end;; *)
 
 
-module Key_value_types : sig
-  type key
+module type Key_value_types_t = sig
+  type key [@@deriving yojson]
   val equal_keya : key -> key -> bool
   val equal_key : key HOL.equal
-  type value_t
+  type value_t [@@deriving yojson]
   val equal_value_ta : value_t -> value_t -> bool
   val equal_value_t : value_t HOL.equal
   val key_ord : key -> key -> Arith.int
-end = struct
+end (*= struct
 
 type key = Private_key of Arith.nat;;
 
@@ -83,7 +93,9 @@
 let rec key_ord k1 k2 = Util.failwitha ['k'; 'e'; 'y'; '_'; 'o'; 'r'; 'd'];;
 
 
-end;;
+end;; *)
+
+module Make = functor (Constants : Constants_t) -> functor(Key_value_types: Key_value_types_t) -> struct
 
 
 module Key_value : sig
@@ -159,7 +171,7 @@
 
 module Tree : sig
   type tree = Node of (Key_value_types.key list * tree list) |
-    Leaf of (Key_value_types.key * Key_value_types.value_t) list
+    Leaf of (Key_value_types.key * Key_value_types.value_t) list [@@deriving yojson]
   val equal_Tree : tree HOL.equal
   val height : tree -> Arith.nat
   val dest_Leaf : tree -> (Key_value_types.key * Key_value_types.value_t) list
@@ -177,7 +189,7 @@
 end = struct
 
 type tree = Node of (Key_value_types.key list * tree list) |
-  Leaf of (Key_value_types.key * Key_value_types.value_t) list;;
+  Leaf of (Key_value_types.key * Key_value_types.value_t) list [@@deriving yojson];;
 
 let rec equal_Tree () = ({HOL.equal = equal_Treea} : tree HOL.equal)
 and equal_Treea
@@ -379,7 +391,7 @@
   type ('a, 'b) core_t_ext =
     Core_t_ext of
       Key_value_types.key * (Tree.tree list) list * Key_value_types.key option *
-        'a * Key_value_types.key option * (Tree.tree list) list * 'b
+        'a * Key_value_types.key option * (Tree.tree list) list * 'b[@@deriving yojson]
   val equal_core_t_exta :
     'a HOL.equal -> 'b HOL.equal ->
       ('a, 'b) core_t_ext -> ('a, 'b) core_t_ext -> bool
@@ -414,7 +426,7 @@
 type ('a, 'b) core_t_ext =
   Core_t_ext of
     Key_value_types.key * (Tree.tree list) list * Key_value_types.key option *
-      'a * Key_value_types.key option * (Tree.tree list) list * 'b;;
+      'a * Key_value_types.key option * (Tree.tree list) list * 'b[@@deriving yojson];;
 
 let rec equal_core_t_exta _A _B
   (Core_t_ext (f_ka, f_tss1a, f_kla, f_ta, f_kua, f_tss2a, morea))
@@ -651,7 +663,7 @@
   type dts_t =
     D_small_leaf of (Key_value_types.key * Key_value_types.value_t) list |
     D_small_node of (Key_value_types.key list * Tree.tree list) |
-    D_updated_subtree of Tree.tree
+    D_updated_subtree of Tree.tree[@@deriving yojson]
   type dts_state_t =
     Dts_down of
       ((Tree.tree, unit) Tree_stack.core_t_ext *
@@ -661,7 +673,7 @@
         ((dts_t, unit) Tree_stack.core_t_ext *
           ((Key_value_types.key list * Tree.tree list), unit)
             Tree_stack.core_t_ext list)
-    | Dts_finished of Tree.tree
+    | Dts_finished of Tree.tree[@@deriving yojson]
   val step_dts : dts_state_t -> dts_state_t option
   val mk_dts_state : Key_value_types.key -> Tree.tree -> dts_state_t
   val focus_to_leaves :
@@ -677,7 +689,7 @@
 type dts_t =
   D_small_leaf of (Key_value_types.key * Key_value_types.value_t) list |
   D_small_node of (Key_value_types.key list * Tree.tree list) |
-  D_updated_subtree of Tree.tree;;
+  D_updated_subtree of Tree.tree[@@deriving yojson];;
 
 type dts_state_t =
   Dts_down of
@@ -688,7 +700,7 @@
       ((dts_t, unit) Tree_stack.core_t_ext *
         ((Key_value_types.key list * Tree.tree list), unit)
           Tree_stack.core_t_ext list)
-  | Dts_finished of Tree.tree;;
+  | Dts_finished of Tree.tree[@@deriving yojson];;
 
 let rec dest_lista
   xs = (match xs
@@ -1085,7 +1097,7 @@
 
 module Insert_tree_stack : sig
   type its_t = Inserting_one of Tree.tree |
-    Inserting_two of (Tree.tree * (Key_value_types.key * Tree.tree))
+    Inserting_two of (Tree.tree * (Key_value_types.key * Tree.tree))[@@deriving yojson]
   type its_state_t =
     Its_down of
       (((Tree.tree, unit) Tree_stack.core_t_ext *
@@ -1095,7 +1107,7 @@
     | Its_up of
         ((its_t, unit) Tree_stack.core_t_ext *
           ((Key_value_types.key list * Tree.tree list), unit)
-            Tree_stack.core_t_ext list)
+            Tree_stack.core_t_ext list)[@@deriving yojson]
   val step_its : its_state_t -> its_state_t option
   val mk_its_state :
     Key_value_types.key -> Key_value_types.value_t -> Tree.tree -> its_state_t
@@ -1108,7 +1120,7 @@
 end = struct
 
 type its_t = Inserting_one of Tree.tree |
-  Inserting_two of (Tree.tree * (Key_value_types.key * Tree.tree));;
+  Inserting_two of (Tree.tree * (Key_value_types.key * Tree.tree))[@@deriving yojson];;
 
 type its_state_t =
   Its_down of
@@ -1119,7 +1131,7 @@
   | Its_up of
       ((its_t, unit) Tree_stack.core_t_ext *
         ((Key_value_types.key list * Tree.tree list), unit)
-          Tree_stack.core_t_ext list);;
+          Tree_stack.core_t_ext list)[@@deriving yojson];;
 
 let rec split_node
   n = let (ks, ts) = n in
@@ -1301,3 +1313,64 @@
 
 end;;
 
+
+
+
+(* more below \/ *)
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+module Json = struct
+
+
+end
+
+
+
+
+end
+(* end file *)
+
