--- gen_our.ml	2017-02-08 17:07:49.413912907 +0000
+++ our.ml	2017-02-08 17:09:55.869444625 +0000
@@ -155,20 +169,20 @@ let equal_value_t = ({HOL.equal = equal_
 
 let rec key_ord k1 k2 = Util.failwitha "key_ord";;
 
-end;;
+end;; *)
 
-module Store : sig
-  type store_error
-  type page_ref = Page_ref of Arith.nat
-  type page = Page of Arith.nat
-  type store = Store of (page_ref -> page)
+module type Store_t = sig
+  type store_error 
+  type page_ref [@@deriving yojson]
+  type page
+  type store
   type 'a sM_t
   val free : page_ref list -> unit sM_t
   val alloc : page -> page_ref sM_t
-  val dest_SM : 'a sM_t -> ('a, store, store_error) Monad.m_t
+  val dest_SM : 'a sM_t -> ('a, store, store_error) Monad.m_t  (* store, store_error only needed for wf checks *)
   val se_fmap : ('a -> 'b) -> 'a sM_t -> 'b sM_t
   val page_ref_to_page : page_ref -> page sM_t
-end = struct
+end (*= struct
 
 type store_error = Store_error of char list;;
 
@@ -755,7 +784,7 @@ let rec r_frame_to_t_frame s = Tree_stac
 end;;
 
 module Find : sig
-  type find_state
+  type find_state[@@deriving yojson]
   val find_step :
     find_state -> (find_state, Store.store, Monad2.error) Monad.m_t
   val empty_btree :
@@ -1283,10 +1312,10 @@ end;;
 
 module Insert : sig
   type i_t = I1 of Store.page_ref |
-    I2 of (Store.page_ref * (Key_value_types.key * Store.page_ref))
+    I2 of (Store.page_ref * (Key_value_types.key * Store.page_ref)) [@@deriving yojson]
   type i_state_t = I_down of (Find.find_state * Key_value_types.value_t) |
     I_up of (i_t * (Store.page_ref, unit) Tree_stack.frame_ext list) |
-    I_finished of Store.page_ref
+    I_finished of Store.page_ref [@@deriving yojson]
   val insert_step :
     i_state_t -> (i_state_t, Store.store, Monad2.error) Monad.m_t
   val dest_i_finished : i_state_t -> Store.page_ref option
@@ -1507,7 +1536,7 @@ module Insert_many : sig
           (Key_value_types.key * Key_value_types.value_t) list))
     | I_up of (i_t * (Store.page_ref, unit) Tree_stack.frame_ext list) |
     I_finished of
-      (Store.page_ref * (Key_value_types.key * Key_value_types.value_t) list)
+      (Store.page_ref * (Key_value_types.key * Key_value_types.value_t) list) [@@deriving yojson]
   val insert_step :
     i_state_t -> (i_state_t, Store.store, Monad2.error) Monad.m_t
   val dest_i_finished :
